TRANSAÇÃO NO POSTGRESQL

RESUMO = Neste tutorial, você vai aprender a lidar com as transações do PostgreSQL usando os BEGIN, COMMIT e ROLLBACK declarações.

* OQUE E UMA TRANSAÇÃO DE BANCO DE DADOS ?

	- Uma transação de banco de dados é uma única unidade de trabalho que consiste em uma ou mais operações.
	- Um exemplo clássico de transação é uma transferência bancária de 
	  uma conta para outra. Uma transação completa deve garantir 
	  um equilíbrio entre as contas do remetente e do destinatário.
	  Isso significa que se a conta do remetente transfere o X 
	  valor, o destinatário recebe o X valor, nem mais nem menos.
    
	-  	Uma transação PostgreSQL é atômica, consistente, isolada e durável. Essas propriedades são frequentemente chamadas de 
	    ACID:
		
		 - A atomicidade garante que a transação seja concluída de uma maneira tudo ou nada.
		 - A consistência garante que a alteração dos dados gravados no banco de dados seja válida e siga regras predefinidas.
		 - O isolamento determina como a integridade da transação é visível para outras transações.
		 - A durabilidade garante que as transações que foram confirmadas sejam armazenadas no banco de dados permanentemente.
		 
* PARA PODER EXEMPLIFICAR UMA TRANSAÇÃO NO BANCO DE DADOS, VAMOS CONFIGURAR, UMA TABELA DE AMOSTRA:

  * CONFIGURANDO UMA TABELA DE AMOSTRA CHAMADA CONTAS:
  
  CREATE TABLE tbl_contas(
  		id INT GENERATED BY DEFAULT AS IDENTITY,
	    nome VARCHAR(100) NOT NULL,
	    balanco NUMERIC(15,2) NOT NULL,
	    PRIMARY KEY(id)
  );
  
  * COMEÇANDO UMA TRANSAÇÃO:
  
    - EXECUTANDO UMA INSERÇÃO DE DADOS NA TABELA CONTAS:
	
	 INSERT INTO tbl_contas(nome,balanco) VALUES
	 ('Bob',10000);
	 
	- QUANDO SE EXECUTA UMA INSERT na TABELA o POSTGRE INSERI UMA NOVA LINHA
	NA TABELA tbl_contas IMEDIATAMENTE. Nesse caso, eu não sei quando a transação começa e não posso
	iterceptar a modificação, e nem como revertê-la;
	
	- PARA INICIAR UMA TRANSAÇÃO, eu USO A SEGUINTE DECLARAÇÃO:
	
		BEGIN TRANSACTION;
		
	OU
	
		BEGIN WORK;
		
	OU APENAS:
	
	    BEGIN;
		
	
	 - INICIANDO UMA NOVA TRANSAÇÃO E INSEREM UMA NOVA CONTA NA TABELA tbl_conta:
 
  		BEGIN;
  
  		INSERT INTO tbl_contas(nome,balanco)
  		VALUES('Pedro',10000);
  
 		NA SESSÃO ATUAL ONDE ESTOU USANDO O MEU USUARIO ATUAL, EM QUE A CONSULTA ESTA SENDO EXECUTADA,
 		VOCÊ PODE VER A MUDANÇA CONSULTANDO A tbl_conta:
 
 		SELECT
      		id,
	  		nome,
	  		balanco
 		FROM
 			tbl_contas;
  
 		NO ENTANTO SE EU INICIAR UMA NOVA SEÇÃO E EXECUTAR A CONSULTA ACIMA,
 		NÃO VOU CONSEGUIR VER A MUDANÇA.
 
  * COMPROMETER UMA TRANSAÇÃO(COMPROMETENDO-SE A UMA TRANSAÇÃO):
  
   - Para tornar a mudança visível para outras sessões (ou usuários), você precisa confirmar a transação usando a COMMIT WORK instrução:
   
   	COMMIT WORK;
	
   OU 
   
   COMMIT TRANSACTION;
   
   OU SIMPLESMENTE:
   
   COMMIT;
   
   - EXEMPLO DE USO DO COMMIT:
   
    - O SEGUINTE COMMIT DECLARAÇÃO INSERI A CONTA DE PEDRO NA tbl_contas:
	
		COMMIT;

    - EM OUTRAS SESSÕES, VOCÊ PODE VER A MUDANÇA CONSULTANDO A tbl_conta:
	
	 SELECT 
	       id,
		   nome,
		   balanco
	 FROM
	    tbl_contas;
		
	- Após executar a COMMIT instrução, o PostgreSQL também garante que a alteração será durável se ocorrer um travamento.
	
	- EXEMPLO USANDO AS DECLARAÇÕES COMMIT,BEGIN:
	
	-- INICIA A TRANSAÇÃO
	BEGIN;
	
	-- OPERAÇÃO QUE DEVE SER EFETUADA
	-- INSERI UMA NOVA LINHA NA tbl_contas
	INSERT INTO tbl_contas(nome,balanco)
	VALUES('Samuel',10000);
	
	-- CONFIRMANDO A OPERAÇÃO
	-- 	confirmar a alteração (ou reverter mais tarde)
	COMMIT;
	
* POSTGRESQL COMMIT: EXEMPLO DE TRASFERENCIA DE CONTA BANCÁRIA


	- Nesta demonstração, mostraremos como transferir US $ 1.000 da conta de PEDRO
	  para a conta de Alice. Usaremos duas sessões para visualizar a mudança 
	  de cada operação.
    
      - NA 1ª SEÇÃO INICIE UMA NOVA TRANSAÇÃO:
	  
	   -- INICIANDO UMA NOVA TRANSAÇÃO
	   BEGIN;
	   
	   -- OPERAÇÃO DA TRANSAÇÃO
	   -- SUBTRANDI 1000 REAIS DA CONTA DE PEDRO QUE POSSUI O ID = 1:
	   UPDATE tbl_contas
	   SET balanco = balanco - 1000
	   WHERE id = 1;
	   
	   NA SEGUNDA SEÇÃO APOS ABRIR UM NOVO EDITOR DE CONSULTA, E ESCREVER,
	   UMA CONSULTA DE DADOS DO TIPO DQL NA TABELA tbl_contas
	   VOU PERCEBER QUE O UPDATE EFETUADO AQUI SO ESTA VISIVEL PARA ESSA SEÇÃO,
	   SOMENTE AQUI POSSO VISUALIZAR ELE, EM OUTRAS SEÇÕES NÃO CONSIGO VER A MUDANÇA, SOMENTE
	   APOS A EXECUÇÃO DE UM COMMIT NA TRANSAÇÃO PARA VER A MUDANÇA OCORRENDO:
	   
	   -- SEGUNDA OPERAÇÃO NA TRANSAÇÃO
	   -- ADD O VALOR SUBTRAIDO DE PEDRO NA CONTA DE ALICE:
	   UPDATE tbl_contas
	   SET balanco = balanco + 1000
	   WHERE id = 2;
	   
	   ESSA OPERAÇÃO DE ATUALIZAÇÃO EFETUADA ACIMA TAMBÉM NÃO E VISIVEL,
	   PARA OUTRAS SESSÕES, MAS COM A CONFIMAÇÃO DA TRANSAÇÃO USANDO O 
	   COMMIT, EM TODAS AS SEÇÕES PODERA VER AS MUDANÇAS FEITAS, LOGO APOS O COMMIT:
	   
	   COMMIT;
	   
	   AGORA PODE VER A MUDANÇA EM QUALQUER SEÇÃO, QUE AS MUDANÇAS JA FORAM COMMITADAS,
	   E ESTA VISIVEL PARA TODAS AS SEÇÕES VEREM
	   
	  
* REVERTER UMA TRANSAÇÃO:

	- PARA reverter ou desfazer a alteração da transação atual, use qualquer uma das seguintes instruções:
	
	 ROLLBACK WORK;
	 
	 OU
	 
	 ROLLBACK TRANSACTION;
	 
	 OU EM SUMA:
	 
	 ROLLBACK;
	 
	 - UTILIZANDO UM EXEMPLO PRATICO PARA MOSTRAR COMO DESFAZER UMA TRANSAÇÃO:
	 
	  - Suponha que você queira transferir US $ 1.500 da conta de Bob para a conta de Alice.
	  No entanto, você acidentalmente envia o dinheiro para a conta de Jack em vez de Alice. 
	  E você deseja reverter toda a transação.
	  
	 - CADASTRANDO A CONTA DE JACK NA TABELA:
	 
	  INSERT INTO tbl_contas(nome,balanco)
	  VALUES('Jack',0);
	  
	  -- INICIANDO TRANSAÇÃO
	  BEGIN;
	  
	  -- OPERAÇÃO
	  -- SUBTRIANDO 1500 REAIS DA CONTA DE BOB:
	  UPDATE tbl_contas 
	  SET balanco = balanco - 1500
	  WHERE id = 1;
	  
	  -- OPERAÇÃO 02
	  -- ADD O VALOR SUBTRAIDO DA CONTA DE BOB PARA A CONTA DE ALICE:
	  UPDATE tbl_contas
	  SET balanco = balanco + 1500
	  WHERE id = 3;
	  
	  -- NO ENTANTO A CONTA DE ALICE TEM ID 2. PORTANTO A MINHA TRANSAÇÃO FOI
	  --ERRA, ISSO FOI UM ERRO, ASSIM PRECISO DESFAZER A ALTERAÇÃO QUE ESSA TRANSAÇÃO 
	  --CAUSOU:
	  
	  -- DESFAZENDO TRANSAÇÃO
	  ROLLBACK;
	   
	  VERIFICANDO  OS SALDOS DE TODAS AS CONTAS:
	  
	  SELECT * FROM tbl_contas;
	   
	  PERCEBE-SE QUE OS SALDOS DAS CONTAS PERMANECEM OS MESMOS DE ANTES DA TRANSAÇÃO
	  
	   
	   